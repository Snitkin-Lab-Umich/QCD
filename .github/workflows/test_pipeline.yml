name: Test QCD Pipeline
run-name: ${{ github.actor }} is testing snakemake workflow 🚀
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  Test-QCD-Pipeline:
    runs-on: ubuntu-latest
    steps:
      # - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      # - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      # - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      
      - name: Checkout repository
        uses: actions/checkout@v3
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "🖥️ The workflow is now ready to test your code on the runner."
      
      - name: List files in the repository
        run: |
          ls
      
      - name: Get working directory
        run: |
          pwd

      - name: Set up Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: '3.10'
          auto-update-conda: true
          activate-environment: 'qcd_env_test'
          environment-file: 'qcd_environment.yaml'
          use-channel-priority: true
        
      - name: Install singularity
        uses: eWaterCycle/setup-singularity@v7
        with:
          singularity-version: 3.7.1

      - name: Install pip dependencies
        run: |
          source $CONDA/bin/activate
          conda activate qcd_env_test
          pip install --requirement requirements.txt
      
      # - name: SSh into Actions
      #   uses: actions/checkout@v4
      # - name: Setup tmate session
      #   uses: mxschmitt/action-tmate@v3
      
      - name: Snakemake workflow
        uses: snakemake/snakemake-github-action@v1.25.1
        with:
          #directory: '.'
          snakefile: 'QCD.smk'
          args: '--cores 4 --use-conda --use-singularity --use-envmodules --conda-cleanup-pkgs cache -j 999 --conda-frontend conda --configfile config/config.yaml --latency-wait 1000'
      - run: echo "🍏 This job's status is ${{ job.status }}."
