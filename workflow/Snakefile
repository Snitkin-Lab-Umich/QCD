# Author: Dhatri Badri and Ali Pirani
configfile: "config/config.yaml"

import pandas as pd
import os
import json
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
import re

# Run workflow until coverage
samples_df = pd.read_csv(config["samples"])
SAMPLE = list(samples_df['sample_id'])
PREFIX = config["prefix"]

SHORT_READS_DIR = config["short_reads"]

def samples_that_passed_coverage(wildcards=None, return_samples_only=False):
    # Get the output file from the checkpoint
    summary_csv = checkpoints.summarize_coverage.get(prefix=PREFIX).output[0]
    # Read the coverage summary
    df = pd.read_csv(summary_csv)
    # Filter samples with coverage > 20
    passed_samples = df[df['Coverage'] > 20]['Sample'].tolist()
    if return_samples_only:
        return passed_samples
    return expand("results/{prefix}/quality_raw/{sample}/{sample}_Forward/{sample}_R1_fastqc.html", prefix=PREFIX, sample=passed_samples) + \ 
            expand("results/{prefix}/quality_aftertrim/{sample}/{sample}_Forward/{sample}_R1_trim_paired_fastqc.html", prefix=PREFIX, sample=passed_samples) + \ 
            expand("results/{prefix}/downsample/{sample}/{sample}_R1_trim_paired.fastq.gz", prefix=PREFIX, sample=passed_samples) 


def samples_that_passed_assembly(wildcards=None, return_samples_only=False):
    # Get the output file from the checkpoint
    summary_csv = checkpoints.summarize_assembly.get(prefix=PREFIX).output[0]
    # Read the coverage summary
    df = pd.read_csv(summary_csv)
    # Filter samples where Spades_success is True
    passed_samples_assembly = df[df['Spades_success'] == True]['Sample'].tolist()
    if return_samples_only:
        return passed_samples_assembly
    return expand("results/{prefix}/spades/{sample}/{sample}_contigs_l1000.fasta", prefix=PREFIX, sample=passed_samples_assembly) + \
            expand("results/{prefix}/prokka/{sample}/{sample}.gff", prefix=PREFIX, sample=passed_samples_assembly) + \
            expand("results/{prefix}/quast/{sample}/report.tsv", prefix=PREFIX, sample=passed_samples_assembly) + \
            expand("results/{prefix}/mlst/{sample}/report.tsv", prefix=PREFIX, sample=passed_samples_assembly) + \
            expand("results/{prefix}/busco/{sample}/{sample}_busco_out.txt", prefix=PREFIX, sample=passed_samples_assembly) + \
            expand("results/{prefix}/skani/{sample}/{sample}_skani_output.txt", prefix=PREFIX, sample=passed_samples_assembly) 

rule all:
    input:
        samples_that_passed_assembly,
        samples_that_passed_coverage,
        QC_summary = expand("results/{prefix}/{prefix}_Report/data/{prefix}_QC_summary.csv", prefix=PREFIX),

####### rules #################
include: "rules/coverage.smk"
include: "rules/coverage_checkpoint.smk"
include: "rules/fastqc_raw.smk" 
include: "rules/trimmomatic.smk"
include: "rules/fatqc_aftertrim.smk"
include: "rules/downsample.smk" 
include: "rules/assembly.smk"
include: "rules/assembly_checkpoint.smk"
include: "rules/bioawk.smk" 
include: "rules/prokka.smk"
include: "rules/quast.smk"
include: "rules/mlst.smk" 
include: "rules/busco.smk" 
include: "rules/skani.smk" 
include: "rules/coverage_report.smk" 
include: "rules/skani_report.smk" 
include: "rules/multiqc.smk" 
include: "rules/mlst_report.smk" 
include: "rules/summary.smk" 
include: "rules/plot.smk" 

""" END OF PIPELINE """
